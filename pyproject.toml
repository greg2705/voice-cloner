[tool.poetry]
name = "Voice_cloner"
version = "1.0.0"
description = "Web application (Gradio) in Python to clone voice using One Shot Classification or Fine-Tuning."
authors = ["Gr√©goire Remy <gregoire2705@gmail.com>"]
license = "Apache 2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
pytest = "^8.0.2"
mypy = "^1.8.0"
ruff = "^0.3.0"
pre-commit = "^3.6.2"
pytest-cov = "^4.1.0"
black = "^24.2.0"
commitizen = "^3.18.3"
poethepoet = "^0.25.0"
torch = {version = "2.2", source = "pytorch-gpu"}
tts = "^0.22.0"
faster-whisper = {git = "https://github.com/SYSTRAN/faster-whisper.git"}
tqdm = "^4.66.5"
pytubefix = "^6.9.2"





[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"



[[tool.poetry.source]]
name = "pytorch-gpu"
url = "https://download.pytorch.org/whl/cu118"
priority = "explicit"

[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"


# Place here the default options for pytest
[tool.pytest.ini_options]
addopts = '''
--strict-config
--strict-markers
--cov=src
--cov-report=html
'''
testpaths = "tests"

[tool.mypy]
plugins = [
  # "pydantic.mypy",
  "numpy.typing.mypy_plugin"
]
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = true
namespace_packages = true

#[tool.pydantic-mypy]
#init_forbid_extra = true
#init_typed = false
#warn_required_dynamic_aliases = true
#warn_untyped_fields = true

[tool.ruff]
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "C90", # mccabe code complexity
    #"N",   # PEP8 naming
    "ANN", # flake8 annotations
    "S",   # flake8 bandit
    "B",   # flake8 bugbear
    "C4",  # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "G",     # flake8-logging-format
    "ASYNC", # flake8-async
    "PL",    # Pylint
    "PD",    # pandas-vet
    "NPY",   # NumPy-specific rules
    "ERA",   # eradicate
    "RUF",   # Ruff-specific rules
    "PERF",  # Perflint
    "FURB",  # refurb
    "UP",    # pyupgrade
    "LOG",   # flake8-logging
    "I",     # isort
]
target-version = "py39"
lint.ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "SIM105",  # do not replace try pass with contextlib.suppress (it's slower)
    "ANN101",  # ignore non typed self
    "ANN102",  # ignore non typed cls
    "ANN401",  # ignore any typing,
    "PLR2004", # do not check if we need to define constants variables for some types.
    "PD901",   # allow 'df' as a variable name
    "PLR6301", # ignore checks for the presence of unused self parameter in methods definitions. This is for properties.
    "E203",    # ignore whitespace before punctuation (conflict with formatter)
    "ISC001",  # conflict with ruff formatter
    "PLC0415", # ignore forcing imports to be at top level
]
lint.unfixable = ["B", "ERA"]
line-length = 120
preview = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "ERA001"]

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 10.
max-complexity = 10

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.pylint]
max-args = 10
max-locals = 25

[tool.ruff.lint.isort]
known-third-party = ["tests"]
extra-standard-library = ["typing_extensions"]
force-single-line = true
force-sort-within-sections = false
order-by-type = true
single-line-exclusions = ["typing", "typing_extensions"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true



[tool.poe.tasks]
test = "pytest -vvv --cov-report html"
check = "ruff check --force-exclude --fix"
clean = "ruff format --force-exclude"
status = "git status"
add ="git add ."
commit = "cz commit"
bump = "cz bump --changelog"
push = "git push"
get_tags = "git tag"
change_version = "git checkout"

